name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: ["main"]

permissions:
  contents: read
  id-token: write

env:
  BUN_VERSION: "1.2.22"

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome check
        run: bun run check

      - name: Run Biome lint
        run: bun run lint

  test-unit:
    name: Run unit tests
    if: false
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests
        run: bun test

  test-e2e:
    name: E2E Tests
    if: false
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: read

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
        options: >-
          --health-cmd="pg_isready -U postgres -d"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    env:
      NODE_ENV: "test"
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}
      # JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      # JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run database migrations
        run: bun run drizzle-kit migrate

      - name: Run E2E tests
        run: bun run test:e2e

  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # needs: [quality, test-unit, test-e2e] FIXME:
    needs: [quality]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality, test-unit, test-e2e, release]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read

    outputs:
      image-tag: ${{ steps.generate_tag.outputs.sha }}

    env:
      NODE_ENV: "production"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: ${{ secrets.BETTER_AUTH_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Generate image tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        if: false
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ID }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login_ecr
        if: false
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build_docker_image
        if: false
        env:
          REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          TAG: ${{ steps.generate_tag.outputs.sha }}
        run: |
          docker build -t $REGISTRY/${{ vars.SERVICE_NAME }}:$TAG -t $REGISTRY/${{ vars.SERVICE_NAME }}:latest .
          docker push $REGISTRY/${{ vars.SERVICE_NAME }} --all-tags
          IMAGE_URI=$REGISTRY/${{ vars.SERVICE_NAME }}:$TAG
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        id: deploy-app-runner
        if: false
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: ${{ vars.SERVICE_NAME }}
          image: ${{ steps.build_docker_image.outputs.image }}
          access-role-arn: ${{ secrets.APP_RUNNER_ROLE_ID }}
          region: ${{ secrets.AWS_REGION }}
          cpu: 1
          memory: 2
          port: 3333
          wait-for-service-stability-seconds: 180

      - name: App Runner check
        if: false
        run: echo "App Runner running... ${{ steps.deploy-app-runner.outputs.service-url }}"
